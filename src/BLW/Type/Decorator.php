<?php
/**
 * Decorator.php | Dec 27, 2013
 *
 * Copyright (c) 2013-2018 mAsT3RpEE's Zone
 *
 * This source file is subject to the MIT license that is bundled
 * with this source code in the file LICENSE.
 *
 * @filesource
 * @copyright mAsT3RpEE's Zone
 * @license MIT
 */

/**
 *	@package BLW\Core
 *	@version 1.0.0
 *	@author Walter Otsyula <wotsyula@mast3rpee.tk>
 */
namespace BLW\Type; if(!defined('BLW')){trigger_error('Unsafe access of custom library',E_USER_WARNING);return;}

/**
 *
 * <h4>Notice:</h4>
 *
 * <p>All Elements must either implement this interface or
 * extend the <code>\BLW\Element</code> class.
 *
 * <hr>
 *
 * @package BLW\Core
 * @api BLW
 * @since 0.1.0
 * @version 1.0.0
 * @author mAsT3RpEE <wotsyula@mast3rpee.tk>
 * @link http://mast3rpee.tk/projects/BLW/ mAsT3RpEE's Zone > Projects > BLW
 */
/**
 * Core event interface.
 *
 * <h4>Notice:</h4>
 *
 * <p>All Events must either implement this interface or
 * extend the <code>\BLW\Type\Event</code> class.
 *
 * <hr>
 * @package BLW\Core
 * @api BLW
 * @since 0.1.0
 * @author mAsT3RpEE <wotsyula@mast3rpee.tk>
 * @link http://mast3rpee.tk/projects/BLW/ BLW Library
 */
abstract Class Decorator extends \BLW\Type\Adaptor implements \BLW\Interfaces\Decorator
{
    /**
     * Constructor.
     * @note On creation must call Subject::AddDecorator.
     * @param mixed $Subject The subject of the decorator.
     * @return void
     */
    final public function __construct(\BLW\Interfaces\Object $Subject)
    {
        parent::__construct($Subject);
        $Subject->AddDecorator($this);
    }

    /**
     * Decorators get access to all messeges before they are sent.
     * @param string $Name Name of the action.
     * @param \BLW\Interfaces\Event $Event Event object associated with the event.
     * @param \BLW\Interfaces\Object $Subject Object being decorated.
     * @return \BLW\Interfaces\Decorator $this
     */
    public function DecorateDo($Name, \BLW\Interfaces\Event $Event, \BLW\Interfaces\Object $Subject)
    {
        return $this;
    }

    /**
     * Decorators get access to all hooks before they are attatched.
     * @param string $Name Name of the action.
     * @param callable $Function Function about to be registered.
     * @param \BLW\Interfaces\Object $Subject Object being decorated.
     * @return \BLW\Interfaces\Decorator $this
     */
    public function DecorateOn($Name, $Function, \BLW\Interfaces\Object $Subject)
    {
        return $this;
    }

    /**
     * Decorators get access to string versions of objects before they are returned.
     * @param string $String Original string generated by subject
     * @param \BLW\Interfaces\Object $Subject Object being decorated.
     * @return string Returns modified string.
     */
    public function DecorateToString($String, \BLW\Interfaces\Object $Subject)
    {
        return $String;
    }

    /**
     * Hook that is called just before an object is serialized.
     * @return \BLW\Interfaces\Adaptor $this
     */
    public function doSerialize() {return $this;}

    /**
     * Hook that is called just after an object is unserialized.
     * @return \BLW\Interfaces\Adaptor $this
    */
    public function doUnSerialize()
    {
        $this->GetSubject()->AddDecorator($this);
    }

    /**
     * Destructor
     * @note On destruction must call Subject::RemDecorator().
     * @return void.
     */
    public function __destruct()
    {
        if (is_object($this->GetSubject())) {
            $this->GetSubject()->RemDecorator($this);
        }
    }
}

return true;