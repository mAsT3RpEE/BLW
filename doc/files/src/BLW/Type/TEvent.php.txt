<?php
/**
 * TEvent.php | Dec 27, 2013
 *
 * @filesource
 * @license MIT
 * @copyright Copyright (c) 2013-2018, mAsT3RpEE's Zone
 *
 * This source file is subject to the MIT license that is bundled
 * with this source code in the file LICENSE.
 */

/**
 *
 * @package BLW\Core
 * @version GIT 0.2.0
 * @author Walter Otsyula <wotsyula@mast3rpee.tk>
 */
namespace BLW\Type;

// @codeCoverageIgnoreStart
if (! defined('BLW')) {

    if (strstr($_SERVER['PHP_SELF'], basename(__FILE__))) {
        header("$_SERVER[SERVER_PROTOCOL] 404 Not Found");
        header('Status: 404 Not Found');

        $_SERVER['REDIRECT_STATUS'] = 404;

        echo "<html>\r\n<head><title>404 Not Found</title></head><body bgcolor=\"white\">\r\n<center><h1>404 Not Found</h1></center>\r\n<hr>\r\n<center>nginx/1.5.9</center>\r\n</body>\r\n</html>\r\n";
        exit();
    }

    return false;
}
// @codeCoverageIgnoreEnd


/**
 * Core Event trait.
 *
 * <h4>Notice:</h4>
 *
 * <p>All Events must either implement the <code>IEvent</code> interface</p>
 *
 * <h3>Summary</h3>
 *
 * <pre>
 * +---------------------------------------------------+
 * | EVENT                                             |
 * +---------------------------------------------------+
 * | $_isPropagationStopped:  bool                     |
 * | $_Subject:               mixed                    |
 * | $_Context:               array                    |
 * +---------------------------------------------------+
 * | isPropagationStopped(): bool                      |
 * +---------------------------------------------------+
 * | stopPropagation():                                |
 * +---------------------------------------------------+
 * | __toString(): string                              |
 * +---------------------------------------------------+
 * </pre>
 *
 * <hr>
 *
 * @package BLW\Core
 * @api BLW
 * @since 0.1.0
 * @author mAsT3RpEE <wotsyula@mast3rpee.tk>
 */
trait TEvent
{

    /**
     * Whether no further event listeners should be triggered.
     *
     * @var bool $_isPropagationStopped
     */
    private $_isPropagationStopped = false;

    /**
     * Object / data associated with the event.
     *
     * @var mixed $_Subject
     */
    protected $_Subject = null;

    /**
     * Event parameters.
     *
     * @var array $_Context
     */
    protected $_Context = array();

    /**
     * Calculate whether further event listeners should be triggered.
     *
     * @return bool <code>TRUE</code> if propagation should be stopped. <code>FALSE</code> otherwise.
     */
    public function isPropagationStopped()
    {
        return $this->_isPropagationStopped;
    }

    /**
     * Stops the propagation of the event to further event listeners.
     *
     * <h4>Note:</h4>
     *
     * <p>If multiple event listeners are connected to the same event, no
     * further event listener will be triggered once any trigger calls
     * <code>stopPropagation()</code>.
     *
     * <hr>
     */
    public function stopPropagation()
    {
        $this->_isPropagationStopped = true;
    }

    /**
     * All objects must have a string representation.
     *
     * @return string String value of object.
     */
    public function __toString()
    {
        return sprintf('[IEvent:%s]', is_object($this->_Subject) ? get_class($this->_Subject) : gettype($this->_Subject));
    }

    /**
     * Dynamic properties.
     *
     * @param string $name
     *            Label of property to search for.
     * @return mixed Returns <code>null</code> if not found.
     */
    public function &__get($name)
    {
        // Subject
        if ($name == 'Subject')
            return $this->_Subject;

        // Context
        elseif (array_key_exists($name, $this->_Context))
            return $this->_Context[$name];

        // Undefined
        trigger_error(sprintf('Undefined property %s::$%s', get_class($this), $name), E_USER_NOTICE);

        // Default
        $null = null;

        return $null;
    }

    /**
     * Dynamic properties.
     *
     * @param string $name
     *            Label of property to search for.
     * @return bool Returns a <code>TRUE</code> if property exists. <code>FALSE</code> otherwise.
     */
    public function __isset($name)
    {
        // Subject
        if ($name == 'Subject')
            return $this->_Subject !== null;

        // Context
        elseif (isset($this->_Context[$name]))
            return true;

        // Undefined
        return false;
    }

    /**
     * Dynamic properties.
     *
     * @param string $name
     *            Label of property to set.
     * @param mixed $value
     *            Value of property.
     */
    public function __set($name, $value)
    {
        // Subject
        if ($name == 'Subject')
            trigger_error(sprintf('Cannot modify readonly property: %s::$%s', get_class($this), $name), E_USER_NOTICE);

        // Context
        else
            $this->_Context[$name] = $value;
    }

    /**
     * Unmap dynamic properties from DataMapper.
     *
     * @param string $name
     *            Label of dynamic property. (case sensitive)
     */
    public function __unset($name)
    {
        // Subject
        if ($name == 'Subject')
            trigger_error(sprintf('Cannot modify readonly property: %s::$%s', get_class($this), $name), E_USER_NOTICE);

        // Context
        else
            unset($this->_Context[$name]);
    }
}

// @codeCoverageIgnoreStart
return true;
// @codeCoverageIgnoreEnd

