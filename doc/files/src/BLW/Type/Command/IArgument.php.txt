<?php
/**
 * IArgument.php | Mar 28, 2014
 *
 * @filesource
 * @license MIT
 * @copyright Copyright (c) 2013-2018, mAsT3RpEE's Zone
 *
 * This source file is subject to the MIT license that is bundled
 * with this source code in the file LICENSE.
 */

/**
 *
 * @package BLW\Command
 * @version GIT 0.2.0
 * @author Walter Otsyula <wotsyula@mast3rpee.tk>
 */
namespace BLW\Type\Command;

use BLW\Type\IFactory;


// @codeCoverageIgnoreStart
if (! defined('BLW')) {

    if (strstr($_SERVER['PHP_SELF'], basename(__FILE__))) {
        header("$_SERVER[SERVER_PROTOCOL] 404 Not Found");
        header('Status: 404 Not Found');

        $_SERVER['REDIRECT_STATUS'] = 404;

        echo "<html>\r\n<head><title>404 Not Found</title></head><body bgcolor=\"white\">\r\n<center><h1>404 Not Found</h1></center>\r\n<hr>\r\n<center>nginx/1.5.9</center>\r\n</body>\r\n</html>\r\n";
        exit();
    }

    return false;
}
// @codeCoverageIgnoreEnd


/**
 * Interface for Command\Input arguments.
 *
 * <h3>Summary</h3>
 *
 * <pre>
 * +---------------------------------------------------+       +------------------+
 * | COMMAND\ARGUMENT                                  |<------| FACTORY          |
 * +---------------------------------------------------+       | ================ |
 * | _Value:  string                                   |       | createFromArray  |
 * | #Value:  string                                   |       | createFromString |
 * +---------------------------------------------------+       +------------------+
 * | createFromArray(): IContainer(Command\Argument)   |
 * |                                                   |
 * | $Arguments:  array()                              |
 * +---------------------------------------------------+
 * | createString(): createFromArray()                 |
 * |                                                   |
 * | $Arguments:  string                               |
 * +---------------------------------------------------+
 * | __construct():                                    |
 * |                                                   |
 * | $Value:  string                                   |
 * +---------------------------------------------------+
 * | __toString():  string                             |
 * +---------------------------------------------------+
 * </pre>
 *
 * <hr>
 *
 * @package BLW\Command
 * @api BLW
 * @since 1.0.0
 * @author mAsT3RpEE <wotsyula@mast3rpee.tk>
 *
 * @property string $_Value [protected] Value of argument.
 * @property string $Value [dynamic] $_Value
 */
Interface IArgument extends \BLW\Type\IFactory
{

    const CLASSNAME = '\\BLW\\Type\\Command\\IArgument';

    /**
     * Creates an instance of IContainer containing arguments parsed from an array.
     *
     * @api BLW
     * @since 1.0.0
     * @link http://www.php.net/manual/en/reserved.variables.argv.php $argv
     *
     * @throws \BLW\Model\InvalidArgumentException If <code>$Arguments</code> is not an <code>array</code> or instance of <code>Traversable</code>.
     *
     * @param array $Arguments
     *            Array of arguments similar to $argv.
     * @param array $NoValue
     *            Array of options that have no value.
     * @return \BLW\Type\IContainer Instance of <code>IContainer</code> containing parsed arguments.
     */
    public static function createFromArray($Arguments, array $NoValue = array());

    /**
     * Creates an instance of IContainer containing arguments parsed from a string.
     *
     * @api BLW
     * @since 1.0.0
     * @uses \BLW\Type\Command\IOption::splitCommandLine() IOption::splitCommandLine()
     *
     * @throws \BLW\Model\InvalidArgumentException If <code>$Arguments</code> is not a <code>string</code>.
     *
     * @param strig $Arguments
     *            String containing commandline.
     * @return \BLW\Type\IContainer Instance of <code>IContainer</code> containing parsed arguments.
     */
    public static function createFromString($Arguments);

    /**
     * All objects must have a string representation.
     *
     * @api BLW
     * @since 1.0.0
     *
     * @return string $this
     */
    public function __toString();
}

// @codeCoverageIgnoreStart
return true;
// @codeCoverageIgnoreEnd

