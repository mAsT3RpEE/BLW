<?php
/**
 * Mock.php | Apr 11, 2014
 *
 * @filesource
 * @license MIT
 * @copyright Copyright (c) 2013-2018, mAsT3RpEE's Zone
 *
 * This source file is subject to the MIT license that is bundled
 * with this source code in the file LICENSE.
 */

/**
 *
 * @package BLW\HTTP
 * @version GIT 0.2.0
 * @author Walter Otsyula <wotsyula@mast3rpee.tk>
 */
namespace BLW\Model\HTTP\Client;

use DateTime;

use BLW\Type\IStream;
use BLW\Type\IFile;
use BLW\Type\IMediator;
use BLW\Type\HTTP\IRequest;
use BLW\Type\HTTP\IResponse;

use BLW\Model\InvalidArgumentException;
use BLW\Model\Event\Generic as Event;
use BLW\Model\HTTP\Response\Generic as Response;
use BLW\Model\HTTP\Request\Generic as Request;


// @codeCoverageIgnoreStart
if (! defined('BLW')) {

    if (strstr($_SERVER['PHP_SELF'], basename(__FILE__))) {
        header("$_SERVER[SERVER_PROTOCOL] 404 Not Found");
        header('Status: 404 Not Found');

        $_SERVER['REDIRECT_STATUS'] = 404;

        echo "<html>\r\n<head><title>404 Not Found</title></head><body bgcolor=\"white\">\r\n<center><h1>404 Not Found</h1></center>\r\n<hr>\r\n<center>nginx/1.5.9</center>\r\n</body>\r\n</html>\r\n";
        exit();
    }

    return false;
}
// @codeCoverageIgnoreEnd


/**
 * Mock HTTP Client
 *
 * <h4>Note</h4>
 *
 * <p>This client returns the same response regardless of request</p>
 *
 * <hr>
 *
 * @package BLW\HTTP
 * @api BLW
 * @since 1.0.0
 * @author mAsT3RpEE <wotsyula@mast3rpee.tk>
 */
class Mock extends \BLW\Type\HTTP\AClient
{

    /**
     * Counter for run() command.
     *
     * @var int $Runs
     */
    public $Runs = 0;

    /**
     * Whether to timeout requests.
     *
     * @var bool $Timetout
     */
    public $Timeout = false;

    /**
     * Constructor
     *
     * @codeCoverageIgnore
     *
     * @return void
     */
    public function __construct()
    {
        // Mediator ID
        $this->_MediatorID = basename(get_class($this));
    }

    /**
     * Converts a request for transport.
     *
     * @codeCoverageIgnore
     *
     * @param \BLW\Type\HTTP\IRequest $Request
     *            Request to translate.
     * @return mixed Translated HTTP request.
     */
    public function translate(IRequest $Request)
    {
        return $Request;
    }

    /**
     * Updates running requests.
     *
     * @codeCoverageIgnore
     *
     * @return void
     */
    public function update()
    {
    }

    /**
     * Schedule requests to run.
     *
     * @codeCoverageIgnore
     *
     * @return int Number of finished requests
     */
    public function schedule()
    {
        static $RawResponse = <<<EOT
HTTP/1.1 200 OK
Server: nginx
Date: Thu, 10 Apr 2014 00:00:00 GMT
Content-Type: text/html; charset=utf-8
Transfer-Encoding: chunked
Connection: keep-alive
Vary: Accept-Encoding, Cookie
X-Frame-Options: SAMEORIGIN
Set-Cookie: test=foo; expires=Wed, 01-Jan-2020 00:00:00 GMT
Content-Encoding: gzip

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Untitled</title>
</head>
<body>
    <h1>Heading</h1>
    <p>Paragraph</p>
</body>
</html>
EOT;

        // Number of requests finished
        $return = 0;

        // Loop through each request
        foreach ($this as $Request)
            if (($Response = $this[$Request]) instanceof IResponse) {

                // Response not finished
                if (! isset($Response['Finished']) ?  : ! $Response['Finished']) {

                    // Finish request
                    $Response = Response::createFromString($RawResponse);
                    $Response['Running'] = $this->Timeout;
                    $Response['Finished'] = ! $this->Timeout;
                    $this[$Request] = $Response;

                    // Upadte count
                    $return ++;
                }
            }

            // Done
        return $return;
    }

    /**
     * Execute requests in que.
     *
     * <h4>Note</h4>
     *
     * <p>Function returns after the specified ammount
     * of time or until all requests have finished.</p>
     *
     * <hr>
     *
     * @codeCoverageIgnore
     * @internal Implementors should manage $Response[Running] and $Response[Finished] flags.
     * @see \BLW\Type\HTTP\IClient::send() IClient::sendAll()
     * @see \BLW\Type\HTTP\IClient::sendAll() IClient::sendAll()
     * @see \BLW\Type\HTTP\IClient::download() IClient::download()
     *
     * @throws \RuntimeException If a curl exception with a message is generated.
     * @throws \BLW\Model\InvalidArgumentException If <code>$Timelimit</code> is not an integer.
     *
     * @param int $TimeLimit
     *            Maximum time to run in milliseconds. Enter -1 to run till all requests have finished.
     * @return int Number of new requests finished during run.
     */
    public function run($TimeLimit = -1)
    {
        // Validate $TimeLimit
        if (! is_int($TimeLimit)) {
            throw new InvalidArgumentException(0);
            return 0;
        }

        // Is time limit positive
        $TimeLimit = $TimeLimit >= 0 ? floatval($TimeLimit) / 1000 :         // Time limit in microtime format
        (float) PHP_INT_MAX; // Default to PHP_INT_MAX

        // Repeat until all requests are handled or time limit has passed
        $Start = microtime(true);
        $Running = true;
        $return = 0;

        while ($Running && microtime(true) - $Start < $TimeLimit) {

            // 1. Schedule new requests
            $return += $this->schedule();

            // 2. Update Running requests
            $this->update();

            // 3. Check que
            if (! $this->countScheduled())
                $Running = false;

                // 4. Allow event ques to empty (don't know if this is how to do it in PHP)
            else
                usleep(10000);
        }

        // Done
        $this->Runs ++;

        return $return;
    }

    /**
     * Downloads a file into a stream.
     *
     * @see \BLW\Type\HTTP\IClient::run() IClient::run()
     * @see \BLW\Type\HTTP\IClient::send() IClient::sendAll()
     * @see \BLW\Type\HTTP\IClient::sendAll() IClient::sendAll()
     *
     * @param \BLW\Type\HTTP\IRequest $Request
     *            Request to download from.
     * @param \BLW\Type\IStream $Stream
     *            Stream to download file to.
     * @return bool <code>TRUE</code> if successful. <code>FALSE</code> otherwise.
     */
    public function download(IRequest $Request, IStream $Stream)
    {
        static $RawBody = <<<EOT
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Untitled</title>
</head>
<body>
    <h1>Heading</h1>
    <p>Paragraph</p>
</body>
</html>
EOT;
        // Write to stream
        fwrite($Stream->fp, $RawBody);

        // Done
        return true;
    }
}

// @codeCoverageIgnoreStart
return true;
// @codeCoverageIgnoreEnd

