<?php
/**
 * TObject.php | Nov 29, 2013
 *
 * @filesource
 * @license MIT
 * @copyright Copyright (c) 2013-2018, mAsT3RpEE's Zone
 *
 * This source file is subject to the MIT license that is bundled
 * with this source code in the file LICENSE.
 */

/**
 *
 * @package BLW\Core
 * @version GIT 0.2.0
 * @author Walter Otsyula <wotsyula@mast3rpee.tk>
 */
namespace BLW\Type;

use ArrayObject;

use BLW\Model\InvalidArgumentException;


if (! defined('BLW')) {

    if (strstr($_SERVER['PHP_SELF'], basename(__FILE__))) {
        header("$_SERVER[SERVER_PROTOCOL] 404 Not Found");
        header('Status: 404 Not Found');

        $_SERVER['REDIRECT_STATUS'] = 404;

        echo "<html>\r\n<head><title>404 Not Found</title></head><body bgcolor=\"white\">\r\n<center><h1>404 Not Found</h1></center>\r\n<hr>\r\n<center>nginx/1.5.9</center>\r\n</body>\r\n</html>\r\n";
        exit();
    }

    return false;
}

/**
 * Core BLW object Trait.
 *
 * <h3>About</h3>
 *
 * <p>All Objects must either implement this trait,
 * implement the <code>BLW\Type\IObject</code> interface or
 * extend the <code>\BLW\Type\AObject</code> class.</p>
 *
 * <h3>Summary</h3>
 *
 * <pre>
 * +---------------------------------------------------+       +------------------+
 * | OBJECT                                            |<------| SERIALIZABLE     |
 * +---------------------------------------------------+       | ================ |
 * | _DataMapper:  IDataMapper                         |       | Serializable     |
 * | _Status:      int                                 |       +------------------+
 * | _ID:          string                              |<------| DATAMAPABLE      |
 * | #ID:          _ID                                 |       +------------------+
 * | #Status:      _Status                             |<------| ITERABLE         |
 * | ####:         Dynamic properties                  |       +------------------+
 * +---------------------------------------------------+
 * | __constructor():                                  |
 * |                                                   |
 * | $DataMapper:  IDataMapper                         |
 * | $ID:          string                              |
 * | $flags:       int                                 |
 * +---------------------------------------------------+
 * | getInstance(): __constructor()                    |
 * +---------------------------------------------------+
 * | createID(): string                                |
 * |                                                   |
 * | $Input:  null|int|string                          |
 * +---------------------------------------------------+
 * | getID() string                                    |
 * +---------------------------------------------------+
 * | setID() IDataMapper::Status                       |
 * |                                                   |
 * | $ID:  string                                      |
 * +---------------------------------------------------+
 * | clearStatus(): IObject $this                      |
 * +---------------------------------------------------+
 * | __toString(): string                              |
 * +---------------------------------------------------+
 * </pre>
 *
 * <hr>
 *
 * @package BLW\Core
 * @api BLW
 * @since 0.1.0
 * @author mAsT3RpEE <wotsyula@mast3rpee.tk>
 * @link http://mast3rpee.tk/projects/BLW/ BLW Library
 *
 * @property string $_ID [protected] Current ID of object.
 * @property string $ID [dynamic] Invokes getID() and setID().
 * @property string $toString [readonly] Invokes __toString().
 */
trait TObject
{
    use\BLW\Type\TSerializable;
    use\BLW\Type\TDataMapable;
    use\BLW\Type\TIterable;

    /**
     * Current ID of object.
     *
     * @see \BLW\Type\IObject::getID() IObject::getID()
     * @see \BLW\Type\IObject::setID() IObject::setID()
     *
     * @var string $_ID
     */
    protected $_ID = '';

    /**
     * Constructor
     *
     * @throws \BLW\Model\InvalidArgumentException If <code>$ID</code> is not a string.
     *
     * @param \BLW\Type\IDataMapper $DataMapper
     *            Used to map dynamic properties in object.
     * @param string $ID
     *            ID of object distinguishing it from another.
     * @param int $flags
     *            Object creation flags.
     */
    public function __construct(IDataMapper $DataMapper = null, $ID = null, $flags = IObject::OBJECT_FLAGS)
    {
        // DataMapper
        $this->_DataMapper = $DataMapper ?: new ArrayObject();

        // Objectid

        // Is $ID NULL
        if ($ID === null)
            $this->_ID = $this->createID();

        // Is $ID scalar
        elseif (is_scalar($ID) ?: is_callable(array(
            $ID,
            '__toString'
        )))
            $this->_ID = strval($ID);

        // $ID is invalid
        else
            throw new InvalidArgumentException(1);
    }

    /**
     * Creates a new instance of the object.
     * (used for chaining).
     *
     * @param \BLW\Type\IDataMapper $DataMapper
     *            Used to map dynamic properties in object.
     * @param string $ID
     *            ID of object distinguishing it from another.
     * @param int $flags
     *            Object creation flags.
     * @return \BLW\Type\IObject Returns a new instance of the class.
     */
    public static function getInstance(IDataMapper $DataMapper, $ID = null, $flags = IObject::OBJECT_FLAGS)
    {
        return new static($DataMapper, $ID, $flags);
    }

    /**
     * Creates a valid Object ID / Label / Name.
     *
     * @throws \BLW\Model\InvalidArgumentException If $Input is not scalar.
     *
     * @param string|int|null $Input
     *            Input can be biased to help regenerate ID's.
     * @return string Returns empty string on error.
     */
    public static function createID($Input = null)
    {
        static $Salt = 'BLW_';

        // NULL $Input
        if ($Input === null)
            // Create new id
            return $Salt . md5($Salt . microtime());

        // Scalar $Input
        elseif (is_scalar($Input) ?: is_callable(array(
            $Input,
            '__toString'
        )))
            // Regenerate id
            return $Salt . md5($Salt . strval($Input));

        // Invalid $Input
        else
            throw new InvalidArgumentException(0);

        return '';
    }

    /**
     * Fetches the current ID of the object.
     *
     * @return string Current ID of the object.
     */
    public function getID()
    {
        return $this->_ID;
    }

    /**
     * Changes the ID of the current object.
     *
     * @param string $ID
     *            New ID.
     * @return int Returns a <code>IDataMapper</code> status code.
     */
    public function setID($ID)
    {
        // Check if $ID is scalar?
        if (is_scalar($ID) ?  : is_callable(array(
            $ID,
            '__toString'
        ))) {

            // Update ID
            $this->_ID = strval($ID);

            // Done
            return IDataMapper::UPDATED;
        }

        // Invalid ID
        return IDataMapper::INVALID;
    }

    /**
     * Clears the status flag of the current object.
     *
     * @return int Returns a <code>IDataMapper</code> status code.
     */
    public function clearStatus()
    {
        // Reset Status
        $this->_Status = 0;

        // Done
        return IDataMapper::UPDATED;
    }

    /**
     * Variable functions.
     *
     * <h4>Note:</h4>
     *
     * <p>Raises a <b>Warning</b> if method is not found.</p>
     *
     * <hr>
     *
     * @param string $name
     *            Label of dynamic method. (case sensitive)
     * @param array $arguments
     *            Arguments to pass to method.
     * @return mixed Returns the result of the function. Returns <code>null</code> on failure.
     */
    public function __call($name, array $arguments)
    {
        // Does property exist? Is it callable?
        if (isset($this->{$name}) && is_callable($this->{$name})) {

            // Call it
            return call_user_func_array($this->{$name}, $arguments);
        }

        // Property does not exist or is uncallable
        else
            trigger_error(sprintf('Cannot call non existant method %s::%s()', get_class($this), $name), E_USER_WARNING);

        // Default value
        return null;
    }

    /**
     * Dynamic properties.
     *
     * @param string $name
     *            Label of property to search for.
     * @return mixed Returns <code>null</code> if not found.
     */
    public function __get($name)
    {
        switch ($name) {
            // ISerializable
            case 'Status':
                return $this->_Status;
            case 'Serializer':
                return $this->getSerializer();
            // IIterable
            case 'Parent':
                return $this->_Parent;
            case 'ID':
                return $this->getID();
            default:

                // IDataMapable
                if ($this->_DataMapper->offsetExists($name))
                    return $this->_DataMapper->offsetGet($name);

                    // Undefined property
                else
                    trigger_error(sprintf('Undefined property %s::$%s', get_class($this), $name), E_USER_NOTICE);
        }

        return null;
    }

    /**
     * Dynamic properties.
     *
     * @param string $name
     *            Label of property to search for.
     * @return bool Returns a <code>TRUE</code> if property exists. <code>FALSE</code> otherwise.
     */
    public function __isset($name)
    {
        switch ($name) {
            // ISerializable
            case 'Status':
            case 'Serializer':
                return true;
            // IIterable
            case 'Parent':
                return $this->_Parent !== null;
            case 'ID':
                return $this->getID() !== null;
            // IDataMapable
            default:
                return $this->_DataMapper->offsetExists($name);
        }
    }

    /**
     * Dynamic properties.
     *
     * @param string $name
     *            Label of property to set.
     * @param mixed $value
     *            Value of property.
     * @return bool Returns a <code>IDataMapper</code> status code.
     */
    public function __set($name, $value)
    {
        // Try to set property
        switch ($name) {
            // ISerializable
            case 'Status':
            case 'Serializer':
                $result = IDataMapper::READONLY;
                break;
            // IIterable
            case 'ID':
                $result = $this->setID($value);
                break;
            case 'Parent':
                $result = $this->setParent($value);
                break;
            // IDataMapable
            default:
                $result = $this->_DataMapper->offsetSet($name, $value);
        }

        // Check results
        switch ($result) {
            // Readonly property
            case IDataMapper::READONLY:
            case IDataMapper::ONESHOT:
                trigger_error(sprintf('Cannot modify readonly property: %s::$%s', get_class($this), $name), E_USER_NOTICE);
                break;
            // Invalid value for property
            case IDataMapper::INVALID:
                trigger_error(sprintf('Invalid value %s for property: %s::$%s', @print_r($value, true), get_class($this), $name), E_USER_NOTICE);
                break;
            // Undefined property property
            case IDataMapper::UNDEFINED:
                trigger_error(sprintf('Tried to modify non-existant property: %s::$%s', get_class($this), $name), E_USER_ERROR);
                break;
        }
    }

    /**
     * Unmap dynamic properties from DataMapper.
     *
     * @param string $name
     *            Label of dynamic property. (case sensitive)
     * @return bool Returns a <code>TRUE</code> if property exists. <code>FALSE</code> otherwise.
     */
    public function __unset($name)
    {
        // Try to unset property
        switch ($name) {
            // ISerializable
            case 'Status':
                $result = $this->clearStatus();
                break;
            // IIterable
            case 'Parent':
                $result = $this->clearParent();
                break;
            // IDataMapable
            default:
                $result = $this->_DataMapper->offsetUnset($name);
        }
    }

    /**
     * All objects must have a string representation.
     *
     * <h4>Note:</h4>
     *
     * <p>Default is the serialized form of the object.</p>
     *
     * <hr>
     *
     * @return string String value of object.
     */
    public function __toString()
    {
        return $this->serialize();
    }
}

return true;

